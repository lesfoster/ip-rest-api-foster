After having already seen this work with authentication (Sun, Jun 7), I tried restarting it a few days later,
and found that I was unauthorized to do some of the operations even when giving the basic authentication credentials.

Perhaps I only imagined it was working earlier?  However, here is a link that I followed which mentions nothing further.
https://www.sothawo.com/2015/07/build-a-spring-boot-rest-service-with-basic-authentication-for-several-users/

The concept here is "Spring default security".

I find that POST, PUT do not work with this.  But GET works fine.

But, here's another guide.
https://howtodoinjava.com/spring-boot2/security-rest-basic-auth-example/

Documentation from Spring itself, on the basic authentication out-of-the-box implementation.
https://docs.spring.io/spring-boot/docs/2.0.x/reference/html/boot-features-security.html

===============================================================================================
29.4.1 Cross Site Request Forgery Protection

Since Spring Boot relies on Spring Securityâ€™s defaults, CSRF protection is turned on by default. This means that the
actuator endpoints that require a POST (shutdown and loggers endpoints), PUT or DELETE will get a 403 forbidden
error when the default security configuration is in use.
================================================================================================

And here is more info on this issue:
https://stackoverflow.com/questions/54758872/spring-boot-security-postman-gives-401-unauthorized

AND... CSRF it was!

@EnableWebSecurity
public class WebSecurityConfig extends
        WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable();
    }
}